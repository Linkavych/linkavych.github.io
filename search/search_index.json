{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is this? /dev/shm is just a collection, a learning resource for myself, and a way to share knowledge gained with others. C #include <stdio.h> #include <stdlib.h> int main ( void ) { FILE * fp ; fp = fopen ( \"/dev/shm/shared.mem\" , \"w\" ); fputs ( \"Malware analysis, detections, infrastructure, and experiments... \\n\\n \" , fp ); fputs ( \" \\t And trying to learn a few things along the way... \\n \" , fp ); fclose ( fp ); return 0 ; } Learning by failing forward Mostly, these are personal notes collected as I continue to learn about reverse engineering, malware analysis, and how actual adversaries (and red teams) operate. In that pursuit, I want to understand how adversaries communicate, the protocols used, and how they are able to evade or defeat protections and detections defenders have in place. This process of experiential and experimental learning is best suited for me, in this type of environment. If I can do it, or implement it, then I probably understand it! Warning These are my experiments, and failures, in the pursuit of learning. I take no credit for any original research here. I stand on the shoulders of other researchers who have developed and employed these techniques to (hopefully!) improve security. Follow me at your own risk - to time and frustration. Main Function Callouts A special note to a few people who have influenced and altered my own path: @spotheplanet and the blog ired.team - A guiding blog on red teaming and exploitation Malware Traffic Analysis and @malware_traffic - A foundational blog for me. Tipped off my interest in malware analysis. @hasherezade and her extensive work on malware available on github and her blog . @herrcore and his work at/for OpenAnalysis and UnpacMe And the work of the many other professionals taking apart adversary activity on a daily basis to defend their networks. Contact Me You can find me in many of the usual social media locations, but primarily: - @linkavych - @linkavych - Linkedin","title":"What is this?"},{"location":"#what-is-this","text":"/dev/shm is just a collection, a learning resource for myself, and a way to share knowledge gained with others. C #include <stdio.h> #include <stdlib.h> int main ( void ) { FILE * fp ; fp = fopen ( \"/dev/shm/shared.mem\" , \"w\" ); fputs ( \"Malware analysis, detections, infrastructure, and experiments... \\n\\n \" , fp ); fputs ( \" \\t And trying to learn a few things along the way... \\n \" , fp ); fclose ( fp ); return 0 ; }","title":"What is this?"},{"location":"#learning-by-failing-forward","text":"Mostly, these are personal notes collected as I continue to learn about reverse engineering, malware analysis, and how actual adversaries (and red teams) operate. In that pursuit, I want to understand how adversaries communicate, the protocols used, and how they are able to evade or defeat protections and detections defenders have in place. This process of experiential and experimental learning is best suited for me, in this type of environment. If I can do it, or implement it, then I probably understand it! Warning These are my experiments, and failures, in the pursuit of learning. I take no credit for any original research here. I stand on the shoulders of other researchers who have developed and employed these techniques to (hopefully!) improve security. Follow me at your own risk - to time and frustration. Main Function","title":"Learning by failing forward"},{"location":"#callouts","text":"A special note to a few people who have influenced and altered my own path: @spotheplanet and the blog ired.team - A guiding blog on red teaming and exploitation Malware Traffic Analysis and @malware_traffic - A foundational blog for me. Tipped off my interest in malware analysis. @hasherezade and her extensive work on malware available on github and her blog . @herrcore and his work at/for OpenAnalysis and UnpacMe And the work of the many other professionals taking apart adversary activity on a daily basis to defend their networks.","title":"Callouts"},{"location":"#contact-me","text":"You can find me in many of the usual social media locations, but primarily: - @linkavych - @linkavych - Linkedin","title":"Contact Me"},{"location":"lab/","text":"Lab Infrastructure Building a home lab is valuable for a number of reasons: understand networking, test an exploit, or see how malware functions in a controlled environment. So, build one - for whatever purpose - and then test things out to see how they work. Never configured a firewall before? Sping up an OpenBSD VM and experiment with PF . Or create an entire Active Directory environment for testing modern exploitation in a Windows environment - not to mention the challenge or learning to build and configure that environment. For whatever reason, build a lab - you'll learn soemthing. The Design Overall, the design of my lab environment is a byproduct of my broader home network. There are two main subnets running on my home network (for now): 192.168.10.0/24 - Main LAN 10.10.10.0/24 - Lab LAN Both of these networks connect to my edge router and firewall: OPNSense . For routing, nothing from the Lab LAN can call call out to the Main LAN directly. However, a pair of machines in my Main LAN are allowed to communicate into the Lab LAN to interact with the various machines. Internal to the lab network is another subnet: the MALNET, at 172.16.0.0/24, which is where I have built my malware analysis environments. Network Diagram The MALNET To interact with machines on the MALNET I have built an Apache Guacamole server as a frontend. It has two (virtual) interfaces, one on the 10.10.10.0/24 and one on the 172.16.0.0/24 subnets. In this way, I'm limiting the contact the malware environment can have with the dirty internet, but it's not airtight - nor do I need it to be. In fact, at some point I'll probably change things up to allow the malware machines to reach otu to the public internet via VPN in order to tap into more active malware campaigns. This works for now, however. Internal to the MALNET I have a minimum of three machines at a given time: REMNUX - Acts as a gateway for the other devices (Windows and *Nix), static analysis platform, and general base of operations. Dynamic-WIN10 - A Windows 10 VM configured to serve as a dynamic analysis platform for Windows malware. Not FLARE-VM, but close enough. FLARE-VM - Another Windows 10 VM setup with the full FLARE VM environment, which is quite heavy, but I like to have it available. Various linux or BSD distributions as required for other malware testing. The Build I will use this section to document the build-out of this lab environment, on a PROXMOX VE backbone, in order to share another method of creating a lab environment. Mine is more complex than some, and certainly less than many others, but I built it to keep learning.","title":"Lab Infrastructure"},{"location":"lab/#lab-infrastructure","text":"Building a home lab is valuable for a number of reasons: understand networking, test an exploit, or see how malware functions in a controlled environment. So, build one - for whatever purpose - and then test things out to see how they work. Never configured a firewall before? Sping up an OpenBSD VM and experiment with PF . Or create an entire Active Directory environment for testing modern exploitation in a Windows environment - not to mention the challenge or learning to build and configure that environment. For whatever reason, build a lab - you'll learn soemthing.","title":"Lab Infrastructure"},{"location":"lab/#the-design","text":"Overall, the design of my lab environment is a byproduct of my broader home network. There are two main subnets running on my home network (for now): 192.168.10.0/24 - Main LAN 10.10.10.0/24 - Lab LAN Both of these networks connect to my edge router and firewall: OPNSense . For routing, nothing from the Lab LAN can call call out to the Main LAN directly. However, a pair of machines in my Main LAN are allowed to communicate into the Lab LAN to interact with the various machines. Internal to the lab network is another subnet: the MALNET, at 172.16.0.0/24, which is where I have built my malware analysis environments. Network Diagram","title":"The Design"},{"location":"lab/#the-malnet","text":"To interact with machines on the MALNET I have built an Apache Guacamole server as a frontend. It has two (virtual) interfaces, one on the 10.10.10.0/24 and one on the 172.16.0.0/24 subnets. In this way, I'm limiting the contact the malware environment can have with the dirty internet, but it's not airtight - nor do I need it to be. In fact, at some point I'll probably change things up to allow the malware machines to reach otu to the public internet via VPN in order to tap into more active malware campaigns. This works for now, however. Internal to the MALNET I have a minimum of three machines at a given time: REMNUX - Acts as a gateway for the other devices (Windows and *Nix), static analysis platform, and general base of operations. Dynamic-WIN10 - A Windows 10 VM configured to serve as a dynamic analysis platform for Windows malware. Not FLARE-VM, but close enough. FLARE-VM - Another Windows 10 VM setup with the full FLARE VM environment, which is quite heavy, but I like to have it available. Various linux or BSD distributions as required for other malware testing.","title":"The MALNET"},{"location":"lab/#the-build","text":"I will use this section to document the build-out of this lab environment, on a PROXMOX VE backbone, in order to share another method of creating a lab environment. Mine is more complex than some, and certainly less than many others, but I built it to keep learning.","title":"The Build"},{"location":"malware/","text":"Malware Analysis Analysis of various families and types of malware, along with my workflow for analysis, stumbles, and other learning points along the way. Organized by operating system, generally, but with other relevant distinctions as needed.","title":"Malware Analysis"},{"location":"malware/#malware-analysis","text":"Analysis of various families and types of malware, along with my workflow for analysis, stumbles, and other learning points along the way. Organized by operating system, generally, but with other relevant distinctions as needed.","title":"Malware Analysis"},{"location":"techniques/","text":"Malware Techniques This section focuses on those techniques employed by malware to do its job. Encryption, secure communications, process injection, persistence, and other methods employed by the adversary to succeed. Again, broadly organized by operating system and by the specific type of technique. Code samples for each technique also included, and malware examples that employ the tecnique in question.","title":"Malware Techniques"},{"location":"techniques/#malware-techniques","text":"This section focuses on those techniques employed by malware to do its job. Encryption, secure communications, process injection, persistence, and other methods employed by the adversary to succeed. Again, broadly organized by operating system and by the specific type of technique. Code samples for each technique also included, and malware examples that employ the tecnique in question.","title":"Malware Techniques"}]}